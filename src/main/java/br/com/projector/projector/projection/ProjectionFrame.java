/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.projector.projector.projection;

import br.com.projector.projector.projection.text.WrappedText;
import br.com.projector.projector.projection.text.WrapperFactory;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.GraphicsDevice;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author 15096134
 */
public class ProjectionFrame extends javax.swing.JFrame implements ProjectionManager {

    private final ProjectionLabel textLabel;
    private final ProjectionBackground background;
    private GraphicsDevice outputDevice;

    /**
     * Creates new form ProjectionFrame
     */
    public ProjectionFrame() {
        initComponents();
        
        textLabel = new ProjectionLabel(projectionCanvas);
        background = new ProjectionBackground(projectionCanvas);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        projectionCanvas = new br.com.projector.projector.projection.ProjectionCanvas();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(640, 480));
        setUndecorated(true);
        setSize(new java.awt.Dimension(640, 480));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        projectionCanvas.setForeground(java.awt.Color.black);
        projectionCanvas.setMinimumSize(new java.awt.Dimension(640, 480));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(projectionCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(projectionCanvas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        getContentPane().setBackground(getBackground());
        projectionCanvas.addProjectable(background);
        projectionCanvas.addProjectable(textLabel);
    }//GEN-LAST:event_formWindowOpened

    @Override
    public void setText(WrappedText string) {
        textLabel.setText(string);
    }

    @Override
    public Font getTextFont() {
        return textLabel.getFont();
    }

    @Override
    public void setTextFont(Font font) {
        textLabel.setFont(font);
    }

    @Override
    public TextWrapperFactoryChangeListener getTextWrapperChangeListener() {
        return textLabel.getWrapperChangeListener();
    }

    @Override
    public void setTextWrapperChangeListener(TextWrapperFactoryChangeListener wrapperChangeListener) {
        textLabel.setWrapperChangeListener(wrapperChangeListener);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private br.com.projector.projector.projection.ProjectionCanvas projectionCanvas;
    // End of variables declaration//GEN-END:variables

    @Override
    public WrapperFactory getWrapperFactory() {
        return textLabel.getWrapperFactory();
    }

    @Override
    public void setBackgroundImageFile(File selectedFile) {
        try {
            BufferedImage img = ImageIO.read(selectedFile);
            background.setImage(img);
        } catch (IOException ex) {
            Logger.getLogger(ProjectionFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void setDevice(GraphicsDevice dev) {
        this.outputDevice = dev;
        
        Rectangle bounds = dev.getDefaultConfiguration().getBounds();
        this.setBounds(bounds);
        this.setVisible(true);
    }
    
    @Override
    public void setFullScreen(boolean fullScreen) {
        if (fullScreen) {
            outputDevice.setFullScreenWindow(this);
            
            // Transparent 16 x 16 pixel cursor image.
            BufferedImage cursorImg = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);

            // Create a new blank cursor.
            Cursor blankCursor = Toolkit.getDefaultToolkit().createCustomCursor(
                cursorImg, new Point(0, 0), "blank cursor");

            // Set the blank cursor to the JFrame.
            this.getContentPane().setCursor(blankCursor);
        } else {
            outputDevice.setFullScreenWindow(null);
            getContentPane().setCursor(Cursor.getDefaultCursor());
        }
    }
}
